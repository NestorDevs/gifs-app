// Mocks generated by Mockito 5.4.6 from annotations
// in gifs_app/test/features/gif_viewer/presentation/cubit/gif_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:giphy_gifs_core/src/domain/entities/gif.dart' as _i5;
import 'package:giphy_gifs_core/src/domain/repositories/gif_repository.dart'
    as _i2;
import 'package:giphy_gifs_core/src/domain/usecases/get_trending_gifs.dart'
    as _i3;
import 'package:giphy_gifs_core/src/domain/usecases/search_gifs.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGifRepository_0 extends _i1.SmartFake implements _i2.GifRepository {
  _FakeGifRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetTrendingGifs].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTrendingGifs extends _i1.Mock implements _i3.GetTrendingGifs {
  MockGetTrendingGifs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GifRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGifRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GifRepository);

  @override
  _i4.Future<List<_i5.GIF>> call({int? offset = 0, int? limit = 25}) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#offset: offset, #limit: limit}),
            returnValue: _i4.Future<List<_i5.GIF>>.value(<_i5.GIF>[]),
          )
          as _i4.Future<List<_i5.GIF>>);
}

/// A class which mocks [SearchGifs].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchGifs extends _i1.Mock implements _i6.SearchGifs {
  MockSearchGifs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GifRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGifRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GifRepository);

  @override
  _i4.Future<List<_i5.GIF>> call(
    String? query, {
    int? offset = 0,
    int? limit = 25,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [query], {#offset: offset, #limit: limit}),
            returnValue: _i4.Future<List<_i5.GIF>>.value(<_i5.GIF>[]),
          )
          as _i4.Future<List<_i5.GIF>>);
}
